Q:
How did viewing a diff between two versions of a file help
you see the bug that was introduced?

A:
It is easier to compare the difference between two versions
than having to search only the current version for a bug.

Q:
How could having easy access to the entire history of a 
file make you a more efficient programmer in the long term?

A:
It is easier to see your own mistakes by examining the history
of  a file.  You can see where your logic was and  was not right.

Q:
What do you think are the pros and cons of manually choosing 
when to create a commit, like you do in Git, vs having versions 
automatically saved, like Google Docs does?

A:
Pros: less versions, more meaning to each version saved
Cons: if you forget to commit changes when needed

Q:
Why do you think some version control systems, like Git, 
allow saving multiple files in one commit, while others, 
like Google Docs, treat each file separately?

A:
Because version control systems like Git often track programs
where files have dependencies, so it makes sense to allow saving
multiple file in one commit.  Google docs, not so much.

Q:
How can you use the commands git log and git diff to view the history of files?

A:
git log: shows a history of the commits, including the commit ID
git diff <older commit ID> <newer commit ID>: shows the difference between two commits, 
with + indicating a line added and - indicating a line removed. 
		  
Q:
How might using version control make you more confident to make changes that could break something?

A:
Because with version control you can always revert to an error-free version!
So breaking the build is easier to stomach.

Q:
Now that you have your workspace set up, what do you want to try using Git for?

A:
saving and tracking changes to files that need version control.
